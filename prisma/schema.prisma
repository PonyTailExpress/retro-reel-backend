generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Movie {
//   id          Int      @id @default(autoincrement())
//   imdbId      String   @unique
//   title       String
//   description String
//   releaseYear Int
//   genre       String[]
//   director    String
//   poster      String
//   rating      Float?
//   trailerUrl  String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model User {
//   id        Int      @id @default(autoincrement())
//   username  String   @unique
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   Review Review[]
// }

// model Review {
//   id        Int      @id @default(autoincrement())
//   movieId   Int
//   userId    Int
//   rating    Int
//   comment   String?
//   createdAt DateTime @default(now())

//   user User @relation(fields: [id], references: [id])
// }

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites         Movie[]    @relation("UserFavorites")
  favoriteRelations Favorite[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  imdbId      String   @unique
  title       String
  description String
  releaseYear Int
  genre       String[]
  director    String
  poster      String
  rating      Float?
  trailerUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  favoritedBy       User[]     @relation("UserFavorites")
  favoriteRelations Favorite[]
}

model Favorite {
  userId  Int
  movieId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
}
